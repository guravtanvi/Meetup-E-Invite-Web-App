{"ast":null,"code":"// const { findRenderedDOMComponentWithTag } = require(\"react-dom/test-utils\");\n// const { response } = require(\"express\");\n// const { json, response } = require(\"express\");\nconst convertErrorCodes = err => Promise.reject(err);\n\nconst fetchLoginPageStatus = () => {\n  return fetch('/session', {\n    method: 'GET'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n/*\r\nconst fetchLoginPage = (username) => {\r\n    console.log(\"fetch login\",username);\r\n    return fetch('/session', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        }),\r\n        body: JSON.stringify({ username })\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then(response => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n}*/\n\n\nconst fetchLoginPage = username => {\n  console.log(\"fetch new login\", username);\n  return fetch('/session', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n\nconst fetchLogoutPage = () => {\n  return fetch('/session', {\n    method: 'DELETE'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.ok;\n  });\n};\n\nconst fetchValidUsers = () => {\n  return fetch('/users', {\n    method: 'GET'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n\nconst fetchRegistrationPage = (username, firstName, lastName) => {\n  return fetch('/registration', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username,\n      firstName,\n      lastName\n    })\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n\nconst fetchDeleteRegistration = () => {\n  return fetch('/registration', {\n    method: 'DELETE'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.ok;\n  });\n};\n\nconst fetchMeetupList = username => {\n  return fetch(`/meetups/${username}`, {\n    method: 'GET'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json.then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n\nconst fetchMeetupForUser = meetupId => {\n  return fetch(`/meetup/${meetupId}`, {\n    method: 'GET'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n\nconst fetchCreateMeetupPage = (title, agenda, date, time, place, host, members) => {\n  const meetup = {\n    title: title,\n    agenda: agenda,\n    date: date,\n    time: time,\n    place: place,\n    host: host,\n    members: members\n  };\n  console.log(\"fetch meetup\", meetup);\n  return fetch('/meetup', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      meetup\n    })\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n\nconst fetchUpdateMeetup = (id, title, agenda, date, time, place, host, members) => {\n  const meetup = {\n    id: id,\n    title: title,\n    agenda: agenda,\n    date: date,\n    time: time,\n    place: place,\n    host: host,\n    members: members\n  };\n  return fetch('/meetup', {\n    method: 'PUT',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify(meetup)\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n\nconst fetchUpdateFeedback = (username, isAttending, meetupId) => {\n  const feedback = {\n    username: username,\n    isAttending: isAttending,\n    meetupId: meetupId\n  };\n  return fetch('/response', {\n    method: 'PUT',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify(feedback)\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.json();\n  });\n};\n\nconst fetchRemoveCreatedMeetup = meetupId => {\n  return fetch(`/meetup/${meetupId}`, {\n    method: 'DELETE'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.ok;\n  });\n};\n\nconst fetchRemoveInvitedMeetup = (username, meetupId) => {\n  return fetch(`/${username}/meetup/${meetupId}`, {\n    method: 'DELETE'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'NETWORK_ERROR'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(convertErrorCodes);\n    }\n\n    return response.ok;\n  });\n};\n\nmodule.exports = {\n  fetchLoginPageStatus,\n  fetchRegistrationPage,\n  fetchLoginPage,\n  fetchMeetupList,\n  fetchMeetupForUser,\n  fetchValidUsers,\n  fetchCreateMeetupPage,\n  fetchUpdateMeetup,\n  fetchUpdateFeedback,\n  fetchRemoveCreatedMeetup,\n  fetchRemoveInvitedMeetup,\n  fetchLogoutPage,\n  fetchDeleteRegistration\n};","map":{"version":3,"sources":["D:/Information System/info6250/project/meetup-app/src/services/services.js"],"names":["convertErrorCodes","err","Promise","reject","fetchLoginPageStatus","fetch","method","catch","code","then","response","ok","json","fetchLoginPage","username","console","log","headers","Headers","body","JSON","stringify","fetchLogoutPage","fetchValidUsers","fetchRegistrationPage","firstName","lastName","fetchDeleteRegistration","fetchMeetupList","fetchMeetupForUser","meetupId","fetchCreateMeetupPage","title","agenda","date","time","place","host","members","meetup","fetchUpdateMeetup","id","fetchUpdateFeedback","isAttending","feedback","fetchRemoveCreatedMeetup","fetchRemoveInvitedMeetup","module","exports"],"mappings":"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","sourcesContent":["// const { findRenderedDOMComponentWithTag } = require(\"react-dom/test-utils\");\r\n// const { response } = require(\"express\");\r\n\r\n// const { json, response } = require(\"express\");\r\n\r\nconst convertErrorCodes = (err) => Promise.reject(err);\r\n\r\nconst fetchLoginPageStatus = () => {\r\n    return fetch('/session', {\r\n        method: 'GET'\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then(response => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n};\r\n/*\r\nconst fetchLoginPage = (username) => {\r\n    console.log(\"fetch login\",username);\r\n    return fetch('/session', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        }),\r\n        body: JSON.stringify({ username })\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then(response => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n}*/\r\nconst fetchLoginPage = (username) => {\r\n    console.log(\"fetch new login\",username);\r\n    return fetch('/session', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n          'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify( {username} ),\r\n      })\r\n      .catch( () => {\r\n        return Promise.reject({code: 'NETWORK_ERROR'});\r\n      })\r\n      .then( response => {\r\n        if(!response.ok) {\r\n          return response.json().then( convertErrorCodes );\r\n        }\r\n        return response.json();\r\n      });\r\n}\r\n\r\nconst fetchLogoutPage = () => {\r\n    return fetch('/session', {\r\n        method: 'DELETE'\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.ok;\r\n    });\r\n};\r\n\r\nconst fetchValidUsers = () => {\r\n    return fetch('/users', {\r\n        method: 'GET'\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR' });\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n};\r\n\r\nconst fetchRegistrationPage = (username, firstName, lastName) => {\r\n    return fetch('/registration', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        }),\r\n        body: JSON.stringify({ username, firstName, lastName }),\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then(response => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n};\r\n\r\nconst fetchDeleteRegistration = () => {\r\n    return fetch('/registration', {\r\n        method: 'DELETE'\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.ok;\r\n    });\r\n};\r\n\r\n\r\nconst fetchMeetupList = (username) => {\r\n    return fetch(`/meetups/${username}`, {\r\n        method: 'GET'\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then(response => {\r\n        if(!response.ok) {\r\n            return response.json.then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n};\r\n\r\nconst fetchMeetupForUser = (meetupId) => {\r\n    return fetch(`/meetup/${meetupId}`, {\r\n        method: 'GET'\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR' });\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n};\r\n\r\n\r\n\r\nconst fetchCreateMeetupPage = (title, agenda, date, time, place, host, members) => {\r\n    const meetup = {\r\n        title: title,\r\n        agenda: agenda,\r\n        date: date,\r\n        time: time,\r\n        place: place,\r\n        host: host,\r\n        members: members\r\n    };\r\n\r\n    console.log(\"fetch meetup\",meetup);\r\n    return fetch('/meetup', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        }),\r\n        body: JSON.stringify({meetup})\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n};\r\n\r\nconst fetchUpdateMeetup = (id, title, agenda, date, time, place, host, members) => {\r\n    const meetup = {\r\n        id: id,\r\n        title: title,\r\n        agenda: agenda,\r\n        date: date,\r\n        time: time,\r\n        place: place,\r\n        host: host,\r\n        members: members\r\n    };\r\n    return fetch('/meetup', {\r\n        method: 'PUT',\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        }),\r\n        body: JSON.stringify(meetup)\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n};\r\n\r\nconst fetchUpdateFeedback = (username, isAttending, meetupId) => {\r\n    const feedback = {\r\n        username: username,\r\n        isAttending: isAttending,\r\n        meetupId: meetupId\r\n    };\r\n    return fetch('/response', {\r\n        method: 'PUT',\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        }),\r\n        body: JSON.stringify(feedback)\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.json();\r\n    });\r\n};\r\n\r\nconst fetchRemoveCreatedMeetup = (meetupId) => {\r\n    return fetch(`/meetup/${meetupId}`, {\r\n        method: 'DELETE'\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.ok;\r\n    });\r\n};\r\n\r\nconst fetchRemoveInvitedMeetup = (username, meetupId) => {\r\n    return fetch(`/${username}/meetup/${meetupId}`, {\r\n        method: 'DELETE'\r\n    })\r\n    .catch(() => {\r\n        return Promise.reject({ code: 'NETWORK_ERROR'});\r\n    })\r\n    .then((response) => {\r\n        if(!response.ok) {\r\n            return response.json().then(convertErrorCodes);\r\n        }\r\n        return response.ok;\r\n    });\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    fetchLoginPageStatus,\r\n    fetchRegistrationPage,\r\n    fetchLoginPage,\r\n    fetchMeetupList,\r\n    fetchMeetupForUser,\r\n    fetchValidUsers,\r\n    fetchCreateMeetupPage,\r\n    fetchUpdateMeetup,\r\n    fetchUpdateFeedback,\r\n    fetchRemoveCreatedMeetup,\r\n    fetchRemoveInvitedMeetup,\r\n    fetchLogoutPage,\r\n    fetchDeleteRegistration\r\n}"]},"metadata":{},"sourceType":"module"}